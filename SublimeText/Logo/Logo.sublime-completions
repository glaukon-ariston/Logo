{
  "scope": "source.logo",
  "completions": [
    "logo",
    {
      "trigger": "*\tOutputs the product of its inputs.",
      "contents": "* ${1:factor2}"
    },
    {
      "trigger": "+\tOutputs the sum of its inputs.",
      "contents": "+ ${1:addend2}"
    },
    {
      "trigger": "-\tOutputs the difference of its inputs.",
      "contents": "- ${1:number2}"
    },
    {
      "trigger": "-\tOutputs the negative of its input.",
      "contents": "- ${1:number}"
    },
    {
      "trigger": ".defmacro\t.",
      "contents": ".defmacro ${1:procname} ${2:text}"
    },
    {
      "trigger": ".eq\tOutputs TRUE if thing1 and thing2 are the same object, so that applying a mutator to one will change the other as well.",
      "contents": ".eq ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": ".macro\tA macro is a special kind of procedure whose output is evaluated as instructions in the context of the macro's caller.",
      "contents": ".macro ${1:procname} ${2::input1} ${3::input2} ${4:...}"
    },
    {
      "trigger": ".maybeoutput\tWorks like OUTPUT except that the expression that provides the input value might not output a value, in which case the effect is like STOP.",
      "contents": ".maybeoutput ${1:value}"
    },
    {
      "trigger": ".setbf\tChanges the BUTFIRST of the list input to a given value.",
      "contents": ".setbf ${1:list} ${2:value}"
    },
    {
      "trigger": ".setfirst\tChanges the first member of list to be value .",
      "contents": ".setfirst ${1:list} ${2:value}"
    },
    {
      "trigger": ".setitem\tChange the index th item of array to be value .",
      "contents": ".setitem ${1:index} ${2:array} ${3:value}"
    },
    {
      "trigger": "/\tOutputs the quotient of its inputs.",
      "contents": "/ ${1:divisor}"
    },
    {
      "trigger": "<\tOutputs TRUE if num1 is strictly less than num2 .",
      "contents": "< ${1:num2}"
    },
    {
      "trigger": "<=\tOutputs TRUE if num1 is less than or equal to num2 .",
      "contents": "<= ${1:num2}"
    },
    {
      "trigger": "<>\tOutputs FALSE if both inputs are equal, TRUE otherwise.",
      "contents": "<> ${1:thing2}"
    },
    {
      "trigger": "=\tOutputs TRUE if both inputs are equal, FALSE otherwise.",
      "contents": "= ${1:thing2}"
    },
    {
      "trigger": ">\tOutputs TRUE if num1 is strictly greater than num2 .",
      "contents": "> ${1:num2}"
    },
    {
      "trigger": ">=\tOutputs TRUE if num1 is greater than or equal to num2 .",
      "contents": ">= ${1:num2}"
    },
    {
      "trigger": "`\tOutputs a list equal to its input but with certain substitutions.",
      "contents": "` ${1:list}"
    },
    {
      "trigger": "abs\tOutputs the absolute value (magnitude) of its input.",
      "contents": "abs ${1:num}"
    },
    {
      "trigger": "activeArea\tOutputs the current active area, as set by SETACTIVEAREA .",
      "contents": "activeArea "
    },
    {
      "trigger": "allopen\tOutputs a list whose members are the names of all files currently open.",
      "contents": "allopen "
    },
    {
      "trigger": "and\tOutputs TRUE if all inputs are TRUE, otherwise FALSE.",
      "contents": "and ${1:boolean1} ${2:boolean2}"
    },
    {
      "trigger": "and\tOutputs TRUE if all inputs are TRUE, otherwise FALSE.",
      "contents": "and ${1:boolean1} ${2:boolean2} ${3:boolean3} ${4:...}"
    },
    {
      "trigger": "apply\tCommand or operation that runs the template , filling its slots with the members of inputlist .",
      "contents": "apply ${1:template} ${2:inputlist}"
    },
    {
      "trigger": "arc\tDraws an arc (part of a circle) based on the turtle heading, turtle position, and inputs.",
      "contents": "arc ${1:angle} ${2:radius}"
    },
    {
      "trigger": "arc2\tMoves the turtle along an arc (part of a circle).",
      "contents": "arc2 ${1:angle} ${2:radius}"
    },
    {
      "trigger": "arccos\tOutputs the inverse cosine of its input.",
      "contents": "arccos ${1:num}"
    },
    {
      "trigger": "arcsin\tOutputs the inverse sine of its input.",
      "contents": "arcsin ${1:num}"
    },
    {
      "trigger": "arctan\tWith one input, outputs the inverse tangent angle of num .",
      "contents": "arctan ${1:num}"
    },
    {
      "trigger": "arctan\tWith one input, outputs the inverse tangent angle of num .",
      "contents": "arctan ${1:x} ${2:y}"
    },
    {
      "trigger": "arity\tOutputs a list of three numbers: the minimum, default, and maximum number of inputs for the procedure whose name is the input.",
      "contents": "arity ${1:procedurename}"
    },
    {
      "trigger": "array\tOutputs an array of size items, each of which initially is an empty list.",
      "contents": "array ${1:size}"
    },
    {
      "trigger": "array\tOutputs an array of size items, each of which initially is an empty list.",
      "contents": "array ${1:size}"
    },
    {
      "trigger": "array?\tOutputs TRUE if the input is an array, FALSE otherwise.",
      "contents": "array? ${1:thing}"
    },
    {
      "trigger": "arrayp\tOutputs TRUE if the input is an array, FALSE otherwise.",
      "contents": "arrayp ${1:thing}"
    },
    {
      "trigger": "arrayToList\tOutputs a list whose members are the elements of the input array.",
      "contents": "arrayToList ${1:array}"
    },
    {
      "trigger": "ascii\tOutputs the number from 0-255 that represents character in your current code page.",
      "contents": "ascii ${1:character}"
    },
    {
      "trigger": "ashift\tOutputs int arithmetic-shifted to the left by amount bits.",
      "contents": "ashift ${1:int} ${2:amount}"
    },
    {
      "trigger": "ask\tInstructs a specific turtle to run a given set of instructions (which are usually turtle instructions).",
      "contents": "ask ${1:turtle} ${2:instructionlist}"
    },
    {
      "trigger": "back\tMoves the turtle backward, exactly opposite to the direction that it's headed, by the specified distance, measured in turtle steps.",
      "contents": "back ${1:distance}"
    },
    {
      "trigger": "backslashed?\tOutputs TRUE if character was originally entered with a backslash ( \\ ) before it or between vertical bars ( | ) to prevent its usual semantic meaning.",
      "contents": "backslashed? ${1:character}"
    },
    {
      "trigger": "backslashedp\tOutputs TRUE if character was originally entered with a backslash ( \\ ) before it or between vertical bars ( | ) to prevent its usual semantic meaning.",
      "contents": "backslashedp ${1:character}"
    },
    {
      "trigger": "before?\tOutputs TRUE if word1 comes before word2 in ASCII collating sequence (for words of letters, in alphabetical order).",
      "contents": "before? ${1:word1} ${2:word2}"
    },
    {
      "trigger": "beforeP\tOutputs TRUE if word1 comes before word2 in ASCII collating sequence (for words of letters, in alphabetical order).",
      "contents": "beforeP ${1:word1} ${2:word2}"
    },
    {
      "trigger": "bf\tIf thing is a word, outputs a word containing all but the first character of the input.",
      "contents": "bf ${1:thing}"
    },
    {
      "trigger": "bfs\tOutputs a list containing the BUTFIRST of each member of the input list.",
      "contents": "bfs ${1:list}"
    },
    {
      "trigger": "bitAnd\tOutputs the bitwise AND of its inputs, which must be integers.",
      "contents": "bitAnd ${1:int1} ${2:int2}"
    },
    {
      "trigger": "bitAnd\tOutputs the bitwise AND of its inputs, which must be integers.",
      "contents": "bitAnd ${1:int1} ${2:int2} ${3:int3} ${4:...}"
    },
    {
      "trigger": "bitBlock\tDraws an opaque block (rectangle) of the given dimensions such that the turtle's current position is at the lower-lefthand corner of the block.",
      "contents": "bitBlock ${1:width} ${2:height}"
    },
    {
      "trigger": "bitCopy\tCopies part of the image and stores it in memory (or the clipboard, if BITINDEX is 0).",
      "contents": "bitCopy ${1:width} ${2:height}"
    },
    {
      "trigger": "bitCut\tCuts out part of the image and stores it in memory (or the clipboard, if BITINDEX is 0).",
      "contents": "bitCut ${1:width} ${2:height}"
    },
    {
      "trigger": "bitFit\tResizes (or \"fits\") the currently \"cut\" ( BITCUT or BITCOPY) image into the specified dimensions.",
      "contents": "bitFit ${1:width} ${2:height}"
    },
    {
      "trigger": "bitIndex\tOutputs current bitmap index, as set by SETBITINDEX .",
      "contents": "bitIndex "
    },
    {
      "trigger": "bitLoad\tLoads the bitmap specified by the filename input.",
      "contents": "bitLoad ${1:filename}"
    },
    {
      "trigger": "bitLoadsize\tOutput the width and height of the bitmap that is specified by the filename input.",
      "contents": "bitLoadsize ${1:filename}"
    },
    {
      "trigger": "bitmapTurtle\tMaps the current turtle (see SETTURTLE) to the corresponding bitmap buffer (see BITCUT).",
      "contents": "bitmapTurtle "
    },
    {
      "trigger": "bitmapTurtle\tMaps the current turtle (see SETTURTLE) to the corresponding bitmap buffer (see BITCUT).",
      "contents": "bitmapTurtle ${1:rotatebitmap}"
    },
    {
      "trigger": "bitMode\tOutputs the current bitmap mode set by SETBITMODE .",
      "contents": "bitMode "
    },
    {
      "trigger": "bitNot\tOutputs the bitwise negation of its input, which must be an integer.",
      "contents": "bitNot ${1:int}"
    },
    {
      "trigger": "bitOr\tOutputs the bitwise OR of its inputs, which must be integers.",
      "contents": "bitOr ${1:int1} ${2:int2}"
    },
    {
      "trigger": "bitOr\tOutputs the bitwise OR of its inputs, which must be integers.",
      "contents": "bitOr ${1:int1} ${2:int2} ${3:int3} ${4:...}"
    },
    {
      "trigger": "bitPaste\tPastes the image that was BITCUT into the bitmap index specified by BITINDEX .",
      "contents": "bitPaste "
    },
    {
      "trigger": "bitPasteToIndex\tPastes the entire image that was \"cut\" with BITCUT to the x , y coordinate of the bitmap at the index input.",
      "contents": "bitPasteToIndex ${1:index} ${2:x} ${3:y}"
    },
    {
      "trigger": "bitSave\tSaves a picture (bitmap image) of your work on the computer's disk.",
      "contents": "bitSave ${1:filename}"
    },
    {
      "trigger": "bitSave\tSaves a picture (bitmap image) of your work on the computer's disk.",
      "contents": "bitSave ${1:filename} ${2:maxcolordepth}"
    },
    {
      "trigger": "bitSize\tOutput the width and height of the bitmap specified by the current BITINDEX .",
      "contents": "bitSize "
    },
    {
      "trigger": "bitXor\tOutputs the bitwise exclusive OR of its inputs, which must be integers.",
      "contents": "bitXor ${1:int1} ${2:int2}"
    },
    {
      "trigger": "bitXor\tOutputs the bitwise exclusive OR of its inputs, which must be integers.",
      "contents": "bitXor ${1:int1} ${2:int2} ${3:int3} ${4:...}"
    },
    {
      "trigger": "bk\tMoves the turtle backward, exactly opposite to the direction that it's headed, by the specified distance, measured in turtle steps.",
      "contents": "bk ${1:distance}"
    },
    {
      "trigger": "bl\tIf the input is a word, BUTLAST outputs a word containing all but the last character of the input.",
      "contents": "bl ${1:thing}"
    },
    {
      "trigger": "buried\tOutputs a contents list consisting of three lists, respectively containing the names of all buried procedures, variables, and property lists in the workspace.",
      "contents": "buried "
    },
    {
      "trigger": "bury\tBuries the procedures, variables, and property lists named in the contentslist input.",
      "contents": "bury ${1:contentslist}"
    },
    {
      "trigger": "buryall\tBuries all procedures, variables, and property lists in the workspace.",
      "contents": "buryall "
    },
    {
      "trigger": "buryname\tBuries the variable(s) named in the input.",
      "contents": "buryname ${1:varname}"
    },
    {
      "trigger": "buryname\tBuries the variable(s) named in the input.",
      "contents": "buryname ${1:varnamelist}"
    },
    {
      "trigger": "butFirst\tIf thing is a word, outputs a word containing all but the first character of the input.",
      "contents": "butFirst ${1:thing}"
    },
    {
      "trigger": "butFirsts\tOutputs a list containing the BUTFIRST of each member of the input list.",
      "contents": "butFirsts ${1:list}"
    },
    {
      "trigger": "butLast\tIf the input is a word, BUTLAST outputs a word containing all but the last character of the input.",
      "contents": "butLast ${1:thing}"
    },
    {
      "trigger": "buttOnCreate\tCreates a button control.",
      "contents": "buttOnCreate ${1:parent} ${2:name} ${3:label} ${4:xpos} ${5:ypos} ${6:width} ${7:height} ${8:callback}"
    },
    {
      "trigger": "buttOnDelete\tDeletes (closes) the button that is identified by name .",
      "contents": "buttOnDelete ${1:name}"
    },
    {
      "trigger": "buttOnEnable\tEnables or disables the button identified by name .",
      "contents": "buttOnEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "buttOnUpdate\tReplaces the text on the button identified by name with text .",
      "contents": "buttOnUpdate ${1:name} ${2:text}"
    },
    {
      "trigger": "bye\tBYE exits FMSLogo.",
      "contents": "bye "
    },
    {
      "trigger": "cascade\tOutputs the result of applying a template (or several templates, see the section entitled Template-Based Iteration ) repeatedly, with a given value filling the slot the f",
      "contents": "cascade ${1:endtest} ${2:template} ${3:startvalue}"
    },
    {
      "trigger": "cascade\tOutputs the result of applying a template (or several templates, see the section entitled Template-Based Iteration ) repeatedly, with a given value filling the slot the f",
      "contents": "cascade ${1:endtest} ${2:template1} ${3:startvalue1} ${4:template2} ${5:startvalue2} ${6:...}"
    },
    {
      "trigger": "cascade\tOutputs the result of applying a template (or several templates, see the section entitled Template-Based Iteration ) repeatedly, with a given value filling the slot the f",
      "contents": "cascade ${1:endtest} ${2:template1} ${3:startvalue1} ${4:template2} ${5:startvalue2} ${6:...} ${7:finaltemplate}"
    },
    {
      "trigger": "cascade.2\tOutputs the result of invoking CASCADE with the same inputs.",
      "contents": "cascade.2 ${1:endtest} ${2:template1} ${3:startvalue1} ${4:template2} ${5:startvalue2}"
    },
    {
      "trigger": "caseignoredp\tNormally, lower-case and upper-case letters are considered equal by EQUALP , BEFOREP , MEMBERP , etc.",
      "contents": "caseignoredp "
    },
    {
      "trigger": "catch\tCommand or operation that runs its instructionlist input and outputs whatever instructionlist outputs.",
      "contents": "catch ${1:tag} ${2:instructionlist}"
    },
    {
      "trigger": "char\tOutputs the character represented by the numeric code number , which must be an integer between 0 and 255.",
      "contents": "char ${1:number}"
    },
    {
      "trigger": "chdir\tChanges the current working directory to directoryname , just like the DOS command CHDIR (cd).",
      "contents": "chdir ${1:directoryname}"
    },
    {
      "trigger": "checkboxCreate\tCreates a checkbox control.",
      "contents": "checkboxCreate ${1:parent} ${2:group} ${3:name} ${4:label} ${5:xpos} ${6:ypos} ${7:width} ${8:height}"
    },
    {
      "trigger": "checkboxDelete\tDeletes (closes) the checkbox that is identified by name .",
      "contents": "checkboxDelete ${1:name}"
    },
    {
      "trigger": "checkboxEnable\tEnables or disables the checkbox identified by name .",
      "contents": "checkboxEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "checkboxGet\tOutputs the state (True or False) of the checkbox that is identified by name .",
      "contents": "checkboxGet ${1:name}"
    },
    {
      "trigger": "checkboxSet\tSets the state of the checkbox that is identified by name to state .",
      "contents": "checkboxSet ${1:name} ${2:state}"
    },
    {
      "trigger": "circle\tDraws a circle based on the turtle's position and the radius input.",
      "contents": "circle ${1:radius}"
    },
    {
      "trigger": "circle2\tMoves the turtle clockwise along a circle of the given radius.",
      "contents": "circle2 ${1:radius}"
    },
    {
      "trigger": "clean\tErases all lines that the turtle has drawn on the graphics window.",
      "contents": "clean "
    },
    {
      "trigger": "clearPalette\tCLEARPALETTE does nothing.",
      "contents": "clearPalette "
    },
    {
      "trigger": "clearScreen\tFills the screen window with SCREENCOLOR and sends the turtle to its initial position and heading.",
      "contents": "clearScreen "
    },
    {
      "trigger": "clearText\tClears all text within the command recall box in the commander window.",
      "contents": "clearText "
    },
    {
      "trigger": "clearTimer\tClears a timer that was scheduled by SETTIMER and identified by id (1-31).",
      "contents": "clearTimer ${1:id}"
    },
    {
      "trigger": "close\tCloses the file named filename .",
      "contents": "close ${1:filename}"
    },
    {
      "trigger": "closeall\tCloses all open files.",
      "contents": "closeall "
    },
    {
      "trigger": "co\tEnds the current interactive pause, returning to the context of the PAUSE invocation that began it.",
      "contents": "co ${1:value}"
    },
    {
      "trigger": "co\tEnds the current interactive pause, returning to the context of the PAUSE invocation that began it.",
      "contents": "co "
    },
    {
      "trigger": "combine\tCombines both of its inputs into a single value.",
      "contents": "combine ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "comboboxAddString\tAppends item to the listbox portion of the combobox that is identified by name .",
      "contents": "comboboxAddString ${1:name} ${2:item}"
    },
    {
      "trigger": "comboboxCreate\tCreates a combobox control.",
      "contents": "comboboxCreate ${1:parent} ${2:name} ${3:xpos} ${4:ypos} ${5:width} ${6:height}"
    },
    {
      "trigger": "comboboxDelete\tDeletes (closes) the combobox that is identified by name .",
      "contents": "comboboxDelete ${1:name}"
    },
    {
      "trigger": "comboboxDeleteString\tDeletes the item at index from the listbox portion of a combobox that is identified by name .",
      "contents": "comboboxDeleteString ${1:name} ${2:index}"
    },
    {
      "trigger": "comboboxEnable\tEnables or disables the combobox identified by name .",
      "contents": "comboboxEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "comboboxGetText\tOutputs the text within the edit control portion of the combobox that is identified by name .",
      "contents": "comboboxGetText ${1:name}"
    },
    {
      "trigger": "comboboxSetText\tSets the contents of the edit control portion of the combobox that is identified by name .",
      "contents": "comboboxSetText ${1:name} ${2:text}"
    },
    {
      "trigger": "contents\tOutputs a contents list consisting of three lists containing names of defined procedures, variables, and property lists, respectively.",
      "contents": "contents "
    },
    {
      "trigger": "continue\tEnds the current interactive pause, returning to the context of the PAUSE invocation that began it.",
      "contents": "continue ${1:value}"
    },
    {
      "trigger": "continue\tEnds the current interactive pause, returning to the context of the PAUSE invocation that began it.",
      "contents": "continue "
    },
    {
      "trigger": "copydef\tMakes a new procedure called newname that is identical to procedure oldname , which may be a primitive.",
      "contents": "copydef ${1:newname} ${2:oldname}"
    },
    {
      "trigger": "cos\tOutputs the cosine of angle , which is taken in degrees.",
      "contents": "cos ${1:angle}"
    },
    {
      "trigger": "count\tOutputs the number of characters in thing , if thing is a word; outputs the number of items in thing , if it is a list or an array.",
      "contents": "count ${1:thing}"
    },
    {
      "trigger": "crossmap\tOutputs a list containing the results of template evaluations.",
      "contents": "crossmap ${1:template} ${2:data}"
    },
    {
      "trigger": "crossmap\tOutputs a list containing the results of template evaluations.",
      "contents": "crossmap ${1:template} ${2:data1} ${3:data2} ${4:...}"
    },
    {
      "trigger": "cs\tFills the screen window with SCREENCOLOR and sends the turtle to its initial position and heading.",
      "contents": "cs "
    },
    {
      "trigger": "ct\tClears all text within the command recall box in the commander window.",
      "contents": "ct "
    },
    {
      "trigger": "cursor\tCURSOR is not supported in FMSLogo.",
      "contents": "cursor "
    },
    {
      "trigger": "debugWindows\tPrints the tree (hierarchy of parent-child relationships) of a window.",
      "contents": "debugWindows "
    },
    {
      "trigger": "debugWindows\tPrints the tree (hierarchy of parent-child relationships) of a window.",
      "contents": "debugWindows ${1:name}"
    },
    {
      "trigger": "define\tDefines a procedure with name procname and definition text .",
      "contents": "define ${1:procname} ${2:text}"
    },
    {
      "trigger": "defined?\tOutputs TRUE if the input is the name of a user-defined procedure or a library procedure.",
      "contents": "defined? ${1:name}"
    },
    {
      "trigger": "definedp\tOutputs TRUE if the input is the name of a user-defined procedure or a library procedure.",
      "contents": "definedp ${1:name}"
    },
    {
      "trigger": "dequeue\tOutputs the least recent (oldest) thing that was enqueued onto a queue with QUEUE .",
      "contents": "dequeue ${1:queuename}"
    },
    {
      "trigger": "dialogCreate\tCreates a window that is suitable for use as a dialog box.",
      "contents": "dialogCreate ${1:parent} ${2:name} ${3:title} ${4:xpos} ${5:ypos} ${6:width} ${7:height} ${8:setup}"
    },
    {
      "trigger": "dialogDelete\tDeletes (closes) the dialog whose name is name .",
      "contents": "dialogDelete ${1:name}"
    },
    {
      "trigger": "dialogEnable\tEnables or disables the dialog identified by name .",
      "contents": "dialogEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "dialogFileopen\tDisplays a standard \"Open\" windows dialog box.",
      "contents": "dialogFileopen ${1:filename}"
    },
    {
      "trigger": "dialogFilesave\tDisplays a standard \"Save As\" windows dialog box.",
      "contents": "dialogFilesave ${1:filename}"
    },
    {
      "trigger": "difference\tOutputs the difference of its inputs.",
      "contents": "difference ${1:number1} ${2:number2} ${3:number1}"
    },
    {
      "trigger": "dir\tPrints out files and directories in the current directory.",
      "contents": "dir "
    },
    {
      "trigger": "directories\tOutputs a list of the names of each directory in the current working directory.",
      "contents": "directories "
    },
    {
      "trigger": "distance\tOutputs the distance the turtle must travel along a straight line to reach the position given as the position input.",
      "contents": "distance ${1:position}"
    },
    {
      "trigger": "distancexyz\tOutputs a number, the distance the turtle must travel along a straight line to reach a 3D coordinate.",
      "contents": "distancexyz ${1:position}"
    },
    {
      "trigger": "dllCall\tCalls a native Windows function with the given arguments and outputs the function's return value.",
      "contents": "dllCall ${1:function_parameter_list}"
    },
    {
      "trigger": "dllCall\tCalls a native Windows function with the given arguments and outputs the function's return value.",
      "contents": "dllCall ${1:function_parameter_list} ${2:dllname}"
    },
    {
      "trigger": "dllFree\tUnloads a DLL that was loaded with DLLLOAD .",
      "contents": "dllFree "
    },
    {
      "trigger": "dllFree\tUnloads a DLL that was loaded with DLLLOAD .",
      "contents": "dllFree ${1:dllname}"
    },
    {
      "trigger": "dllLoad\tLoads the DLL (Dynamic Linked Library) called dllfilename into FMSLogo.",
      "contents": "dllLoad ${1:dllfilename}"
    },
    {
      "trigger": "do.until\tRepeatedly evaluates the instructionlist as long as the evaluated conditionlist remains FALSE.",
      "contents": "do.until ${1:instructionlist} ${2:conditionlist}"
    },
    {
      "trigger": "do.while\tRepeatedly evaluates the instructionlist as long as the evaluated conditionlist remains TRUE.",
      "contents": "do.while ${1:instructionlist} ${2:conditionlist}"
    },
    {
      "trigger": "down\tPitches the turtle's nose downward by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "down ${1:angle}"
    },
    {
      "trigger": "downpitch\tPitches the turtle's nose downward by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "downpitch ${1:angle}"
    },
    {
      "trigger": "dribble\tCreates a new file whose name is the filename input, like OPENWRITE, and begins recording in that file everything that is read from the keyboard.",
      "contents": "dribble ${1:filename}"
    },
    {
      "trigger": "ed\tOpens the definitions of the named item(s) in the editor .",
      "contents": "ed ${1:contentslist}"
    },
    {
      "trigger": "edall\tOpens all definitions in the workspace in the editor .",
      "contents": "edall "
    },
    {
      "trigger": "edit\tOpens the definitions of the named item(s) in the editor .",
      "contents": "edit ${1:contentslist}"
    },
    {
      "trigger": "edn\tOpens all named variables in the editor .",
      "contents": "edn ${1:varname}"
    },
    {
      "trigger": "edn\tOpens all named variables in the editor .",
      "contents": "edn ${1:varnamelist}"
    },
    {
      "trigger": "edns\tOpens all unburied variables in the editor .",
      "contents": "edns "
    },
    {
      "trigger": "edpl\tOpens all named property lists in the Editor .",
      "contents": "edpl ${1:varname}"
    },
    {
      "trigger": "edpl\tOpens all named property lists in the Editor .",
      "contents": "edpl ${1:varnamelist}"
    },
    {
      "trigger": "edpls\tOpens all unburied property lists in the Editor .",
      "contents": "edpls "
    },
    {
      "trigger": "edps\tOpens all unburied procedures in the editor .",
      "contents": "edps "
    },
    {
      "trigger": "ellipse\tDraws an ellipse based on the turtle heading, turtle position, and given inputs.",
      "contents": "ellipse ${1:crosswise.semiaxis} ${2:inline.semiaxis}"
    },
    {
      "trigger": "ellipse2\tDraws an ellipse as if the turtle moved clockwise in an ellipse.",
      "contents": "ellipse2 ${1:inline.semiaxis} ${2:crosswise.semiaxis}"
    },
    {
      "trigger": "ellipsearc\tDraws part of (or all of) an ellipse based on the turtle heading, turtle position and given inputs.",
      "contents": "ellipsearc ${1:angle} ${2:crosswise.semiaxis} ${3:inline.semiaxis} ${4:startangle}"
    },
    {
      "trigger": "ellipsearc2\tMoves the turtle clockwise over an elliptic arc.",
      "contents": "ellipsearc2 ${1:arc.angle} ${2:y.semiaxis} ${3:x.semiaxis} ${4:start.angle}"
    },
    {
      "trigger": "empty?\tOutputs TRUE if thing is either the empty string or the empty list, FALSE otherwise.",
      "contents": "empty? ${1:thing}"
    },
    {
      "trigger": "emptyp\tOutputs TRUE if thing is either the empty string or the empty list, FALSE otherwise.",
      "contents": "emptyp ${1:thing}"
    },
    {
      "trigger": "end\tEND delimits the end of a procedure that is defined with TO .",
      "contents": "end "
    },
    {
      "trigger": "eof?\tOutputs TRUE if there are no more characters to be read in the read stream file, FALSE otherwise.",
      "contents": "eof? "
    },
    {
      "trigger": "eofp\tOutputs TRUE if there are no more characters to be read in the read stream file, FALSE otherwise.",
      "contents": "eofp "
    },
    {
      "trigger": "equal?\tOutputs TRUE if both inputs are equal, FALSE otherwise.",
      "contents": "equal? ${1:thing1} ${2:thing2} ${3:thing1}"
    },
    {
      "trigger": "equalp\tOutputs TRUE if both inputs are equal, FALSE otherwise.",
      "contents": "equalp ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "er\tErases the procedures, variables, and property lists named in contentslist .",
      "contents": "er ${1:contentslist}"
    },
    {
      "trigger": "erall\tErases all unburied procedures, variables, and property lists from the workspace.",
      "contents": "erall "
    },
    {
      "trigger": "erall\tErases all unburied procedures, variables, and property lists from the workspace.",
      "contents": "erall ${1:showwarning}"
    },
    {
      "trigger": "erase\tErases the procedures, variables, and property lists named in contentslist .",
      "contents": "erase ${1:contentslist}"
    },
    {
      "trigger": "eraseFile\tErases (deletes, removes) the file named filename .",
      "contents": "eraseFile ${1:filename}"
    },
    {
      "trigger": "erf\tErases (deletes, removes) the file named filename .",
      "contents": "erf ${1:filename}"
    },
    {
      "trigger": "ern\tErases the variable(s) named in the input from the workspace.",
      "contents": "ern ${1:varname}"
    },
    {
      "trigger": "ern\tErases the variable(s) named in the input from the workspace.",
      "contents": "ern ${1:varnamelist}"
    },
    {
      "trigger": "erns\tErases all unburied variables from the workspace.",
      "contents": "erns "
    },
    {
      "trigger": "erpl\tErases the property lists named in the input from the workspace.",
      "contents": "erpl ${1:plname}"
    },
    {
      "trigger": "erpl\tErases the property lists named in the input from the workspace.",
      "contents": "erpl ${1:plnamelist}"
    },
    {
      "trigger": "erpls\tErases all unburied property lists from the workspace.",
      "contents": "erpls "
    },
    {
      "trigger": "erps\tErases all unburied procedures from the workspace.",
      "contents": "erps "
    },
    {
      "trigger": "erract\tERRACT is an instructionlist that is run whenever an error is thrown and there is no CATCH tag for \"ERROR.",
      "contents": "erract "
    },
    {
      "trigger": "error\tOutputs a list describing the error just caught, if any.",
      "contents": "error "
    },
    {
      "trigger": "eventCheck\tThe EVENTCHECK command is like calling YIELD immediately followed by NOYIELD.",
      "contents": "eventCheck "
    },
    {
      "trigger": "exp\tOutputs e (2.",
      "contents": "exp ${1:exponent}"
    },
    {
      "trigger": "false\tThis is a special word to indicate a negative condition.",
      "contents": "false "
    },
    {
      "trigger": "fd\tMoves the turtle forward in the direction that it's headed by the specified distance, measured in turtle steps.",
      "contents": "fd ${1:distance}"
    },
    {
      "trigger": "fence\tTells the turtle to enter \"fence\" mode.",
      "contents": "fence "
    },
    {
      "trigger": "files\tOutputs a list of the names of each file in the current working directory.",
      "contents": "files "
    },
    {
      "trigger": "fill\tFills in a region of the graphics window containing the turtle and bounded by lines that have been drawn earlier.",
      "contents": "fill "
    },
    {
      "trigger": "fill\tFills in a region of the graphics window containing the turtle and bounded by lines that have been drawn earlier.",
      "contents": "fill ${1:fillmode}"
    },
    {
      "trigger": "filter\tOutputs a word or list, depending on the type of the data input, containing a subset of the members (for a list) or characters (for a word) of the input.",
      "contents": "filter ${1:conditiontemplate} ${2:data}"
    },
    {
      "trigger": "find\tOutputs the first item of the data input for which the value produced by evaluating conditiontemplate with that item in its slot is TRUE.",
      "contents": "find ${1:conditiontemplate} ${2:data}"
    },
    {
      "trigger": "first\tIf thing is a word, outputs the first character of the word.",
      "contents": "first ${1:thing}"
    },
    {
      "trigger": "firsts\tOutputs a list containing the FIRST of each member of the input list.",
      "contents": "firsts ${1:list}"
    },
    {
      "trigger": "floodColor\tOutputs flood color information.",
      "contents": "floodColor "
    },
    {
      "trigger": "floodColour\tOutputs flood color information.",
      "contents": "floodColour "
    },
    {
      "trigger": "fontfaceNames\tOutputs a list of the names of every font typeface that is supported by the operating system.",
      "contents": "fontfaceNames "
    },
    {
      "trigger": "for\tFOR is a flexible tool for iteration.",
      "contents": "for ${1:controllist} ${2:instructionlist}"
    },
    {
      "trigger": "foreach\tCommand that evaluates the templatelist repeatedly, once for each item in datalist .",
      "contents": "foreach ${1:datalist} ${2:templatelist}"
    },
    {
      "trigger": "foreach\tCommand that evaluates the templatelist repeatedly, once for each item in datalist .",
      "contents": "foreach ${1:datalist1} ${2:datalist2} ${3:...} ${4:templatelist}"
    },
    {
      "trigger": "forever\tRuns instructionlist repeatedly, forever.",
      "contents": "forever ${1:instructionlist}"
    },
    {
      "trigger": "form\tOutputs a word containing a printable representation of num , possibly preceded by spaces (and therefore not a number for purposes of performing arithmetic operations).",
      "contents": "form ${1:num} ${2:width} ${3:precision}"
    },
    {
      "trigger": "forward\tMoves the turtle forward in the direction that it's headed by the specified distance, measured in turtle steps.",
      "contents": "forward ${1:distance}"
    },
    {
      "trigger": "fput\tOutputs a list equal to list with thing put on the front.",
      "contents": "fput ${1:thing} ${2:list}"
    },
    {
      "trigger": "fs\tUndocks the commander window from the screen window so that you can resize it to maximize the space available for graphics.",
      "contents": "fs "
    },
    {
      "trigger": "fullscreen\tUndocks the commander window from the screen window so that you can resize it to maximize the space available for graphics.",
      "contents": "fullscreen "
    },
    {
      "trigger": "fulltext\tOutputs a representation of the procedure procname in which formatting information is preserved.",
      "contents": "fulltext ${1:procname}"
    },
    {
      "trigger": "gensym\tOutputs a unique word each time it is invoked.",
      "contents": "gensym "
    },
    {
      "trigger": "getfocus\tOutputs the caption (title) of the window in focus.",
      "contents": "getfocus "
    },
    {
      "trigger": "gifLoad\tLoads the GIF picture (compressed bitmap image) specified by the filename input.",
      "contents": "gifLoad ${1:filename}"
    },
    {
      "trigger": "gifSave\tSave a picture of your work as a GIF (pronounced \"jif\") image so that it can be used on Web pages or Email.",
      "contents": "gifSave ${1:filename}"
    },
    {
      "trigger": "gifSave\tSave a picture of your work as a GIF (pronounced \"jif\") image so that it can be used on Web pages or Email.",
      "contents": "gifSave ${1:filename} ${2:delay} ${3:append} ${4:loop}"
    },
    {
      "trigger": "gifSave\tSave a picture of your work as a GIF (pronounced \"jif\") image so that it can be used on Web pages or Email.",
      "contents": "gifSave ${1:filename} ${2:delay} ${3:append} ${4:loop} ${5:maxcolor}"
    },
    {
      "trigger": "gifSave\tSave a picture of your work as a GIF (pronounced \"jif\") image so that it can be used on Web pages or Email.",
      "contents": "gifSave ${1:filename} ${2:delay} ${3:append} ${4:loop} ${5:maxcolor} ${6:transcolorvector}"
    },
    {
      "trigger": "gifSize\tOutput the width and height of the GIF file that is specified by the filename input.",
      "contents": "gifSize ${1:filename}"
    },
    {
      "trigger": "goldenratio\tOutputs a close approximation to the golden ratio, which is (1 + SQRT 5)/2 .",
      "contents": "goldenratio "
    },
    {
      "trigger": "goto\tChanges the point of execution within a procedure to a given tag.",
      "contents": "goto ${1:tag}"
    },
    {
      "trigger": "gprop\tOutputs the value of the property named propertyname in the property list named plistname , or the empty list if there is no such property or property list.",
      "contents": "gprop ${1:plistname} ${2:propertyname}"
    },
    {
      "trigger": "greater?\tOutputs TRUE if num1 is strictly greater than num2 .",
      "contents": "greater? ${1:num1} ${2:num2} ${3:num1}"
    },
    {
      "trigger": "greaterEqual?\tOutputs TRUE if num1 is greater than or equal to num2 .",
      "contents": "greaterEqual? ${1:num1} ${2:num2} ${3:num1}"
    },
    {
      "trigger": "greaterEqualp\tOutputs TRUE if num1 is greater than or equal to num2 .",
      "contents": "greaterEqualp ${1:num1} ${2:num2}"
    },
    {
      "trigger": "greaterP\tOutputs TRUE if num1 is strictly greater than num2 .",
      "contents": "greaterP ${1:num1} ${2:num2}"
    },
    {
      "trigger": "groupboxCreate\tCreate a group box control.",
      "contents": "groupboxCreate ${1:parent} ${2:name} ${3:xpos} ${4:ypos} ${5:width} ${6:height}"
    },
    {
      "trigger": "groupboxDelete\tDeletes (closes) the group box control that is identified by name .",
      "contents": "groupboxDelete ${1:name}"
    },
    {
      "trigger": "halt\tThe HALT command immediately stops FMSLogo from processing any further commands and returns control to the commander.",
      "contents": "halt "
    },
    {
      "trigger": "hasOwnpen?\tOutputs TRUE if the currently selected turtle has its own setting for PENMODE , PENSIZE , and PENCOLOR .",
      "contents": "hasOwnpen? "
    },
    {
      "trigger": "hasOwnpenp\tOutputs TRUE if the currently selected turtle has its own setting for PENMODE , PENSIZE , and PENCOLOR .",
      "contents": "hasOwnpenp "
    },
    {
      "trigger": "heading\tOutputs the turtle's heading measured in degrees clockwise from the positive Y-axis.",
      "contents": "heading "
    },
    {
      "trigger": "help\tOpens the FMSLogo manual.",
      "contents": "help "
    },
    {
      "trigger": "help\tOpens the FMSLogo manual.",
      "contents": "help ${1:keyword}"
    },
    {
      "trigger": "hideturtle\tMakes the turtle invisible.",
      "contents": "hideturtle "
    },
    {
      "trigger": "home\tMoves the turtle to the center of the screen and sets the turtle's heading, pitch, and roll to 0.",
      "contents": "home "
    },
    {
      "trigger": "ht\tMakes the turtle invisible.",
      "contents": "ht "
    },
    {
      "trigger": "icon\tMinimizes the window whose title matches caption .",
      "contents": "icon ${1:caption}"
    },
    {
      "trigger": "if\tCommand or operation where: If condition evaluates to TRUE, then IF runs true.",
      "contents": "if ${1:condition} ${2:true.instructionlist}"
    },
    {
      "trigger": "if\tCommand or operation where: If condition evaluates to TRUE, then IF runs true.",
      "contents": "if ${1:condition} ${2:true.instructionlist} ${3:false.instructionlist}"
    },
    {
      "trigger": "ifelse\tCommand or operation where: If condition evaluates to TRUE, then IFELSE runs true.",
      "contents": "ifelse ${1:condition} ${2:true.instructionlist} ${3:false.instructionlist}"
    },
    {
      "trigger": "iff\tRuns instructionlist if the most recent TEST instruction had a FALSE input.",
      "contents": "iff ${1:instructionlist}"
    },
    {
      "trigger": "iffalse\tRuns instructionlist if the most recent TEST instruction had a FALSE input.",
      "contents": "iffalse ${1:instructionlist}"
    },
    {
      "trigger": "ift\tRuns instructionlist if the most recent TEST instruction had a TRUE input.",
      "contents": "ift ${1:instructionlist}"
    },
    {
      "trigger": "iftrue\tRuns instructionlist if the most recent TEST instruction had a TRUE input.",
      "contents": "iftrue ${1:instructionlist}"
    },
    {
      "trigger": "ignore\tIGNORE does nothing.",
      "contents": "ignore ${1:list}"
    },
    {
      "trigger": "ingameport\tReads the value (or resistance across) the game port channel specified by mask .",
      "contents": "ingameport ${1:mask}"
    },
    {
      "trigger": "inport\tReads 2 bytes (16 bits) from the port specified by portid and output the data as an integer.",
      "contents": "inport ${1:portid}"
    },
    {
      "trigger": "inportb\tReads one byte from the port specified by portid and output the data as an integer.",
      "contents": "inportb ${1:portid}"
    },
    {
      "trigger": "int\tOutputs its input with fractional part removed.",
      "contents": "int ${1:num}"
    },
    {
      "trigger": "invoke\tProcedure that runs the template , filling its slots with the remaining input(s).",
      "contents": "invoke ${1:template} ${2:input}"
    },
    {
      "trigger": "invoke\tProcedure that runs the template , filling its slots with the remaining input(s).",
      "contents": "invoke ${1:template} ${2:input1} ${3:input2} ${4:...}"
    },
    {
      "trigger": "iseq\tOutputs a consecutive ordered list of integers starting with from and ending with to .",
      "contents": "iseq ${1:from} ${2:to}"
    },
    {
      "trigger": "item\tIf thing is a word, ITEM outputs the index -th character of the word.",
      "contents": "item ${1:index} ${2:thing}"
    },
    {
      "trigger": "key?\tA predicate that outputs TRUE if there are more characters to read from the read stream.",
      "contents": "key? "
    },
    {
      "trigger": "keyboardOff\tDisables trapping of keyboard events.",
      "contents": "keyboardOff "
    },
    {
      "trigger": "keyboardOn\tStarts trapping keyboard events and sending them to keydown and keyup .",
      "contents": "keyboardOn ${1:keydown}"
    },
    {
      "trigger": "keyboardOn\tStarts trapping keyboard events and sending them to keydown and keyup .",
      "contents": "keyboardOn ${1:keydown} ${2:keyup}"
    },
    {
      "trigger": "keyboardValue\tOutputs a number that corresponds to last key that was either pushed or released.",
      "contents": "keyboardValue "
    },
    {
      "trigger": "keyp\tA predicate that outputs TRUE if there are more characters to read from the read stream.",
      "contents": "keyp "
    },
    {
      "trigger": "label\tPrints text to the screen at the turtle's current position and heading.",
      "contents": "label ${1:text}"
    },
    {
      "trigger": "labelfont\tOutputs a list describing the current font that is used by the LABEL command.",
      "contents": "labelfont "
    },
    {
      "trigger": "labelsize\tOutputs the size (width and height) of the given text if it were rendered with the LABEL command.",
      "contents": "labelsize ${1:text}"
    },
    {
      "trigger": "last\tIf thing is a word, outputs the last character of the word.",
      "contents": "last ${1:thing}"
    },
    {
      "trigger": "left\tTurns the turtle counterclockwise by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "left ${1:angle}"
    },
    {
      "trigger": "leftroll\tRolls the turtle toward his left side by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "leftroll ${1:angle}"
    },
    {
      "trigger": "less?\tOutputs TRUE if num1 is strictly less than num2 .",
      "contents": "less? ${1:num1} ${2:num2} ${3:num1}"
    },
    {
      "trigger": "lessequal?\tOutputs TRUE if num1 is less than or equal to num2 .",
      "contents": "lessequal? ${1:num1} ${2:num2} ${3:num1}"
    },
    {
      "trigger": "lessequalp\tOutputs TRUE if num1 is less than or equal to num2 .",
      "contents": "lessequalp ${1:num1} ${2:num2}"
    },
    {
      "trigger": "lessp\tOutputs TRUE if num1 is strictly less than num2 .",
      "contents": "lessp ${1:num1} ${2:num2}"
    },
    {
      "trigger": "light\tOutputs the lighting attributes as a list of two numbers, the Ambient and Diffuse values.",
      "contents": "light "
    },
    {
      "trigger": "list\tOutputs a list whose members are its inputs, which can be any Logo thing (word, list, or array).",
      "contents": "list ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "list\tOutputs a list whose members are its inputs, which can be any Logo thing (word, list, or array).",
      "contents": "list ${1:thing1} ${2:thing2} ${3:thing3} ${4:...}"
    },
    {
      "trigger": "list?\tOutputs TRUE if the input is a list, FALSE otherwise.",
      "contents": "list? ${1:thing}"
    },
    {
      "trigger": "listboxAddstring\tAdds item to the listbox that is identified by name .",
      "contents": "listboxAddstring ${1:name} ${2:item}"
    },
    {
      "trigger": "listboxCreate\tCreates a listbox control.",
      "contents": "listboxCreate ${1:parent} ${2:name} ${3:xpos} ${4:ypos} ${5:width} ${6:height}"
    },
    {
      "trigger": "listboxDelete\tDeletes (closes) the listbox whose name is name .",
      "contents": "listboxDelete ${1:name}"
    },
    {
      "trigger": "listboxDeleteString\tDeletes the item at index from the listbox that is identified by name .",
      "contents": "listboxDeleteString ${1:name} ${2:index}"
    },
    {
      "trigger": "listboxEnable\tEnables or disables the listbox identified by name .",
      "contents": "listboxEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "listboxGetselect\tOutputs the selected item within the listbox that is identified by name .",
      "contents": "listboxGetselect ${1:name}"
    },
    {
      "trigger": "listp\tOutputs TRUE if the input is a list, FALSE otherwise.",
      "contents": "listp ${1:thing}"
    },
    {
      "trigger": "listToArray\tOutputs an array with the same elements as the input list .",
      "contents": "listToArray ${1:list}"
    },
    {
      "trigger": "listToArray\tOutputs an array with the same elements as the input list .",
      "contents": "listToArray ${1:list} ${2:origin}"
    },
    {
      "trigger": "ln\tOutputs the natural logarithm of the num .",
      "contents": "ln ${1:num}"
    },
    {
      "trigger": "load\tReads instructions from the file named filename and runs them.",
      "contents": "load ${1:filename}"
    },
    {
      "trigger": "local\tCreates variables that are local to the currently running procedure.",
      "contents": "local ${1:varname}"
    },
    {
      "trigger": "local\tCreates variables that are local to the currently running procedure.",
      "contents": "local ${1:varnamelist}"
    },
    {
      "trigger": "local\tCreates variables that are local to the currently running procedure.",
      "contents": "local ${1:varname1} ${2:varname2} ${3:...}"
    },
    {
      "trigger": "localmake\tLOCALMAKE declares a local variable and assigns it a variable.",
      "contents": "localmake ${1:varname} ${2:value}"
    },
    {
      "trigger": "log10\tOutputs the common logarithm of num .",
      "contents": "log10 ${1:num}"
    },
    {
      "trigger": "logoVersion\tOutputs a four item list that describes the version of Logo which you are using.",
      "contents": "logoVersion "
    },
    {
      "trigger": "lowercase\tOutputs a word which is a copy of word , but with all uppercase letters changed to the corresponding lowercase letter.",
      "contents": "lowercase ${1:word}"
    },
    {
      "trigger": "lput\tOutputs a list equal to list with thing added as the last item.",
      "contents": "lput ${1:thing} ${2:list}"
    },
    {
      "trigger": "lr\tRolls the turtle toward his left side by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "lr ${1:angle}"
    },
    {
      "trigger": "lshift\tOutputs int shifted logically to the left by amount bits.",
      "contents": "lshift ${1:int} ${2:amount}"
    },
    {
      "trigger": "lt\tTurns the turtle counterclockwise by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "lt ${1:angle}"
    },
    {
      "trigger": "machine\tOutputs a list that describes the characteristics of the machine.",
      "contents": "machine "
    },
    {
      "trigger": "macro?\tOutputs TRUE if the input is the name of a user-defined macro or a library macro.",
      "contents": "macro? ${1:name}"
    },
    {
      "trigger": "macroexpand\tOperation that inputs Logo expression ( macrocall ) that invokes a macro and outputs the Logo expression into which the macro would translate the input expression.",
      "contents": "macroexpand ${1:macrocall}"
    },
    {
      "trigger": "macrop\tOutputs TRUE if the input is the name of a user-defined macro or a library macro.",
      "contents": "macrop ${1:name}"
    },
    {
      "trigger": "make\tCommand that assigns the value value to the variable named varname , which must be a word.",
      "contents": "make ${1:varname} ${2:value}"
    },
    {
      "trigger": "map\tOutputs a word or list, depending on the type of the data input, of the same length as that data input.",
      "contents": "map ${1:templatelist} ${2:data}"
    },
    {
      "trigger": "map\tOutputs a word or list, depending on the type of the data input, of the same length as that data input.",
      "contents": "map ${1:templatelist} ${2:data1} ${3:data2} ${4:...}"
    },
    {
      "trigger": "map.se\tOutputs a list formed by evaluating templatelist repeatedly and concatenating the results using SENTENCE .",
      "contents": "map.se ${1:templatelist} ${2:data}"
    },
    {
      "trigger": "map.se\tOutputs a list formed by evaluating templatelist repeatedly and concatenating the results using SENTENCE .",
      "contents": "map.se ${1:templatelist} ${2:data1} ${3:data2} ${4:...}"
    },
    {
      "trigger": "maximize\tMaximizes the window whose title matches caption .",
      "contents": "maximize ${1:caption}"
    },
    {
      "trigger": "mci\tMCI lets you write Logo procedures to manipulate multimedia devices.",
      "contents": "mci ${1:mci-command-list}"
    },
    {
      "trigger": "mci\tMCI lets you write Logo procedures to manipulate multimedia devices.",
      "contents": "mci ${1:mci-command-list} ${2:callback}"
    },
    {
      "trigger": "mdarray\tOutputs a multi-dimensional array.",
      "contents": "mdarray ${1:sizelist}"
    },
    {
      "trigger": "mdarray\tOutputs a multi-dimensional array.",
      "contents": "mdarray ${1:sizelist} ${2:origin}"
    },
    {
      "trigger": "mditem\tOutputs an item of the multi-dimensional array (or multi-dimensional list) selected by the list of numbers (an index list).",
      "contents": "mditem ${1:indexlist} ${2:mdarray}"
    },
    {
      "trigger": "mdsetitem\tReplaces an item in a multi-dimensional array with a new value.",
      "contents": "mdsetitem ${1:indexlist} ${2:mdarray} ${3:value}"
    },
    {
      "trigger": "member\tIf thing2 is a word or list and if MEMBERP with these inputs would output TRUE, then MEMBER outputs the portion of thing2 from the first instance of thing1 to the end.",
      "contents": "member ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "member?\tOutputs TRUE if thing1 is a member of thing2 .",
      "contents": "member? ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "memberp\tOutputs TRUE if thing1 is a member of thing2 .",
      "contents": "memberp ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "messageBox\tDisplays a dialog box with title in the title bar and message as the message.",
      "contents": "messageBox ${1:title} ${2:message}"
    },
    {
      "trigger": "midiClose\tCloses the MIDI device that was opened with MIDIOPEN .",
      "contents": "midiClose "
    },
    {
      "trigger": "midiMessage\tSends a MIDI message to the MIDI sequencer.",
      "contents": "midiMessage ${1:message}"
    },
    {
      "trigger": "midiOpen\tOpens the MIDI device and accesses it through a MIDI device driver.",
      "contents": "midiOpen "
    },
    {
      "trigger": "midiOpen\tOpens the MIDI device and accesses it through a MIDI device driver.",
      "contents": "midiOpen ${1:id}"
    },
    {
      "trigger": "minimize\tMinimizes the window whose title matches caption .",
      "contents": "minimize ${1:caption}"
    },
    {
      "trigger": "minus\tOutputs the negative of its input.",
      "contents": "minus ${1:number}"
    },
    {
      "trigger": "mkdir\tMakes (creates) a directory and then changes ( CHDIR) into it.",
      "contents": "mkdir ${1:directoryname}"
    },
    {
      "trigger": "modulo\tOutputs the remainder of dividing dividend divided by divisor .",
      "contents": "modulo ${1:dividend} ${2:divisor}"
    },
    {
      "trigger": "mouseoff\tDisables trapping of mouse events.",
      "contents": "mouseoff "
    },
    {
      "trigger": "mouseon\tStarts trapping mouse events that are sent to the \"FMSLogo\" window and passes them to leftbuttondown , leftbuttonup , rightbuttondown , rightbuttonup , or move , dependin",
      "contents": "mouseon ${1:leftbuttondown} ${2:leftbuttonup} ${3:rightbuttondown} ${4:rightbuttonup} ${5:move}"
    },
    {
      "trigger": "mousepos\tOutput the position of the mouse at the time the last mouse event was generated.",
      "contents": "mousepos "
    },
    {
      "trigger": "name\tCommand that assigns the value value to the variable named varname , which must be a word.",
      "contents": "name ${1:value} ${2:varname}"
    },
    {
      "trigger": "name?\tOutputs TRUE if the input is the name of a variable.",
      "contents": "name? ${1:name}"
    },
    {
      "trigger": "namelist\tOutputs a contents list consisting of an empty list followed by a list of the name or names given as input.",
      "contents": "namelist ${1:varname}"
    },
    {
      "trigger": "namelist\tOutputs a contents list consisting of an empty list followed by a list of the name or names given as input.",
      "contents": "namelist ${1:varnamelist}"
    },
    {
      "trigger": "namep\tOutputs TRUE if the input is the name of a variable.",
      "contents": "namep ${1:name}"
    },
    {
      "trigger": "names\tOutputs a contents list consisting of an empty procedure list (indicating no procedure names) followed by a list of all unburied variable names in the workspace.",
      "contents": "names "
    },
    {
      "trigger": "netAcceptOff\tStops accepting incoming connections.",
      "contents": "netAcceptOff "
    },
    {
      "trigger": "netAcceptOn\tEnables you to accept a connection over the network on the localport .",
      "contents": "netAcceptOn ${1:localport} ${2:sendready} ${3:receiveready}"
    },
    {
      "trigger": "netAcceptReceiveValue\tOutputs the value of the last network data received on the accept socket.",
      "contents": "netAcceptReceiveValue "
    },
    {
      "trigger": "netAcceptSendValue\tSends data out the accept socket.",
      "contents": "netAcceptSendValue ${1:data}"
    },
    {
      "trigger": "netConnectOff\tShuts down a connection that was created with NETCONNECTON .",
      "contents": "netConnectOff "
    },
    {
      "trigger": "netConnectOn\tInitiates a connection over the network to the TCP port remoteport on remotemachinename .",
      "contents": "netConnectOn ${1:remotemachinename} ${2:remoteport} ${3:sendready} ${4:receiveready}"
    },
    {
      "trigger": "netConnectReceiveValue\tOutputs the value of the last network data received on the connection that was created with NETCONNECTON .",
      "contents": "netConnectReceiveValue "
    },
    {
      "trigger": "netConnectSendValue\tSends data out the connection that was created with NETCONNECTON .",
      "contents": "netConnectSendValue ${1:data}"
    },
    {
      "trigger": "netShutdown\tTurns off networking in FMSLogo.",
      "contents": "netShutdown "
    },
    {
      "trigger": "netStartup\tTurns on networking in FMSLogo.",
      "contents": "netStartup "
    },
    {
      "trigger": "netStartup\tTurns on networking in FMSLogo.",
      "contents": "netStartup ${1:synchronous_dns}"
    },
    {
      "trigger": "noBitmapTurtle\tRestores the turtle to its original triangle shape.",
      "contents": "noBitmapTurtle "
    },
    {
      "trigger": "nodes\tOutputs a list of two numbers.",
      "contents": "nodes "
    },
    {
      "trigger": "nodribble\tStops copying information to the dribble file and closes the file.",
      "contents": "nodribble "
    },
    {
      "trigger": "norefresh\tTells Logo not to remember the turtle's motions.",
      "contents": "norefresh "
    },
    {
      "trigger": "nostatus\tCloses the popup status window, if it is open.",
      "contents": "nostatus "
    },
    {
      "trigger": "not\tOutputs TRUE if the input is FALSE, and vice versa.",
      "contents": "not ${1:boolean}"
    },
    {
      "trigger": "notequal?\tOutputs FALSE if both inputs are equal, TRUE otherwise.",
      "contents": "notequal? ${1:thing1} ${2:thing2} ${3:thing1}"
    },
    {
      "trigger": "notequalp\tOutputs FALSE if both inputs are equal, TRUE otherwise.",
      "contents": "notequalp ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "noyield\tNOYIELD tells FMSLogo not to interrupt running Logo instructions to process windows messages, such as keyboard input, mouse clicks, or notifications to repaint the screen",
      "contents": "noyield "
    },
    {
      "trigger": "number?\tOutputs TRUE if thing is a number, FALSE otherwise.",
      "contents": "number? ${1:thing}"
    },
    {
      "trigger": "numberp\tOutputs TRUE if thing is a number, FALSE otherwise.",
      "contents": "numberp ${1:thing}"
    },
    {
      "trigger": "op\tEnds the running of the procedure in which it appears.",
      "contents": "op ${1:value}"
    },
    {
      "trigger": "openAppend\tOpens the file named filename for writing.",
      "contents": "openAppend ${1:filename}"
    },
    {
      "trigger": "openAppend\tOpens the file named filename for writing.",
      "contents": "openAppend ${1:filename} ${2:binarymode}"
    },
    {
      "trigger": "openRead\tOpens the file named filename for reading.",
      "contents": "openRead ${1:filename}"
    },
    {
      "trigger": "openRead\tOpens the file named filename for reading.",
      "contents": "openRead ${1:filename} ${2:binarymode}"
    },
    {
      "trigger": "openUpdate\tOpens the file named filename named for reading and writing.",
      "contents": "openUpdate ${1:filename}"
    },
    {
      "trigger": "openUpdate\tOpens the file named filename named for reading and writing.",
      "contents": "openUpdate ${1:filename} ${2:binarymode}"
    },
    {
      "trigger": "openWrite\tOpens the file named filename for writing.",
      "contents": "openWrite ${1:filename}"
    },
    {
      "trigger": "openWrite\tOpens the file named filename for writing.",
      "contents": "openWrite ${1:filename} ${2:binarymode}"
    },
    {
      "trigger": "or\tOutputs TRUE if at least one input is TRUE.",
      "contents": "or ${1:boolean1} ${2:boolean2}"
    },
    {
      "trigger": "or\tOutputs TRUE if at least one input is TRUE.",
      "contents": "or ${1:boolean1} ${2:boolean2} ${3:boolean3} ${4:...}"
    },
    {
      "trigger": "orientation\tOutputs a list, the turtle's [roll pitch heading] each in degrees.",
      "contents": "orientation "
    },
    {
      "trigger": "outport\tWrites data to the \"hardware\" port specified by portid .",
      "contents": "outport ${1:portid} ${2:data}"
    },
    {
      "trigger": "outportb\tWrites data to the \"hardware\" port specified by portid .",
      "contents": "outportb ${1:portid} ${2:data}"
    },
    {
      "trigger": "output\tEnds the running of the procedure in which it appears.",
      "contents": "output ${1:value}"
    },
    {
      "trigger": "parse\tOutputs the list that would result if word were entered in response to a READLIST operation.",
      "contents": "parse ${1:word}"
    },
    {
      "trigger": "pause\tCommand or operation that enters an interactive pause.",
      "contents": "pause "
    },
    {
      "trigger": "pc\tOutputs pen color information.",
      "contents": "pc "
    },
    {
      "trigger": "pd\tSets the pen's position to \"down\", without changing its mode.",
      "contents": "pd "
    },
    {
      "trigger": "pe\tSets the pen's position to \"down\" and the pen's mode to \"erase\".",
      "contents": "pe "
    },
    {
      "trigger": "pen\tOutputs a list containing the pen's position, mode, and hardware-specific characteristics, for use by SETPEN.",
      "contents": "pen "
    },
    {
      "trigger": "penColor\tOutputs pen color information.",
      "contents": "penColor "
    },
    {
      "trigger": "penColour\tOutputs pen color information.",
      "contents": "penColour "
    },
    {
      "trigger": "penDown\tSets the pen's position to \"down\", without changing its mode.",
      "contents": "penDown "
    },
    {
      "trigger": "penDown?\tOutputs TRUE if the pen is down, FALSE if it's up.",
      "contents": "penDown? "
    },
    {
      "trigger": "penDownp\tOutputs TRUE if the pen is down, FALSE if it's up.",
      "contents": "penDownp "
    },
    {
      "trigger": "penErase\tSets the pen's position to \"down\" and the pen's mode to \"erase\".",
      "contents": "penErase "
    },
    {
      "trigger": "penMode\tOutputs one of the words \"paint\", \"erase\", or \"reverse\" according to the current pen mode.",
      "contents": "penMode "
    },
    {
      "trigger": "penNormal\tSets the pen's state to the startup default of down and paint.",
      "contents": "penNormal "
    },
    {
      "trigger": "penPaint\tSets the pen's position to \"down\" and the pen's mode to \"paint\".",
      "contents": "penPaint "
    },
    {
      "trigger": "penPattern\tPENPATTERN is not supported in FMSLogo.",
      "contents": "penPattern "
    },
    {
      "trigger": "penReverse\tSets the pen's position to \"down\" and the pen's mode to \"reverse\".",
      "contents": "penReverse "
    },
    {
      "trigger": "penSize\tOutputs the size of the pen as a list with two items: [Width Height].",
      "contents": "penSize "
    },
    {
      "trigger": "penUp\tSets the pen's position to \"up\", without changing its mode.",
      "contents": "penUp "
    },
    {
      "trigger": "perspective\tTells the turtle to enter \"perspective\" mode.",
      "contents": "perspective "
    },
    {
      "trigger": "pi\tOutputs the value pi (3.",
      "contents": "pi "
    },
    {
      "trigger": "pick\tOutputs a randomly chosen item from thing .",
      "contents": "pick ${1:thing}"
    },
    {
      "trigger": "pitch\tOutputs the angle of the turtle's pitch in degrees.",
      "contents": "pitch "
    },
    {
      "trigger": "pixel\tOutputs the color of the pixel that is currently under the turtle.",
      "contents": "pixel "
    },
    {
      "trigger": "playwave\tPlays a wave file.",
      "contents": "playwave ${1:wavefile} ${2:flags}"
    },
    {
      "trigger": "plist\tOutputs a list of the properties in the property list named plistname .",
      "contents": "plist ${1:plistname}"
    },
    {
      "trigger": "plists\tOutputs a contents list, which is a list of three lists.",
      "contents": "plists "
    },
    {
      "trigger": "pllist\tOutputs a contents list consisting of two empty lists followed by a list of the name or names given as input.",
      "contents": "pllist ${1:plistname}"
    },
    {
      "trigger": "pllist\tOutputs a contents list consisting of two empty lists followed by a list of the name or names given as input.",
      "contents": "pllist ${1:plistnamelist}"
    },
    {
      "trigger": "po\tPrints the definitions of all procedures, variables, and property lists named in contentslist to the current write stream.",
      "contents": "po ${1:contentslist}"
    },
    {
      "trigger": "poall\tPrints all unburied definitions in the workspace to the current write stream.",
      "contents": "poall "
    },
    {
      "trigger": "polyend\tCompletes the definition of a polygon that was started with the most recent POLYSTART call.",
      "contents": "polyend "
    },
    {
      "trigger": "polystart\tStarts the definition of a new polygon.",
      "contents": "polystart "
    },
    {
      "trigger": "polyview\tPOLYVIEW erases the screen and renders all polygons defined with POLYSTART and POLYEND as shaded polygons.",
      "contents": "polyview "
    },
    {
      "trigger": "pon\tPrints the definitions of the named variable(s) to the current write stream.",
      "contents": "pon ${1:varname}"
    },
    {
      "trigger": "pon\tPrints the definitions of the named variable(s) to the current write stream.",
      "contents": "pon ${1:varlistname}"
    },
    {
      "trigger": "pons\tPrints the definitions of all unburied variables in the workspace to the current write stream.",
      "contents": "pons "
    },
    {
      "trigger": "pop\tOutputs the most recent thing that was pushed on the stack named stackname (using PUSH ) and removes that member from the stack.",
      "contents": "pop ${1:stackname}"
    },
    {
      "trigger": "popdir\tPops you up (1 level) out of a directory.",
      "contents": "popdir "
    },
    {
      "trigger": "popl\tPrints the contents of the named property lists(s) to the current write stream.",
      "contents": "popl ${1:plname}"
    },
    {
      "trigger": "popl\tPrints the contents of the named property lists(s) to the current write stream.",
      "contents": "popl ${1:plnamelist}"
    },
    {
      "trigger": "popls\tPrints the contents of all unburied property lists in the workspace to the current write stream.",
      "contents": "popls "
    },
    {
      "trigger": "pops\tPrints the definitions of all unburied procedures in the workspace to the current write stream.",
      "contents": "pops "
    },
    {
      "trigger": "portClose\tCloses a port that was opened by PORTOPEN .",
      "contents": "portClose "
    },
    {
      "trigger": "portFlush\tFlushes all buffered output to the open port.",
      "contents": "portFlush ${1:input}"
    },
    {
      "trigger": "portMode\tSets the mode (speed, parity, data bits, and stop bits) of the open COM port.",
      "contents": "portMode ${1:modestring}"
    },
    {
      "trigger": "portOpen\tGives you access to the serial and parallel ports of your computer.",
      "contents": "portOpen ${1:port}"
    },
    {
      "trigger": "portReadArray\tReads data from the currently open port into the given buffer array.",
      "contents": "portReadArray ${1:count} ${2:buffer}"
    },
    {
      "trigger": "portReadChar\tReads one byte from the currently open port and outputs it as an integer from -128 to 127.",
      "contents": "portReadChar "
    },
    {
      "trigger": "portWriteArray\tPORTWRITEARRAY writes to the currently open port with the data in buffer , which must be an array of byte-sized integers.",
      "contents": "portWriteArray ${1:count} ${2:buffer}"
    },
    {
      "trigger": "portWriteChar\tWrites one byte to the currently open port.",
      "contents": "portWriteChar ${1:data}"
    },
    {
      "trigger": "pos\tOutputs the turtle's current position, as a list of two numbers, the X and Y coordinates.",
      "contents": "pos "
    },
    {
      "trigger": "posxyz\tOutputs the turtle's current position, as a list of three numbers, the X, Y, and Z coordinates.",
      "contents": "posxyz "
    },
    {
      "trigger": "pot\tPrints the title lines of the named procedures, the definitions of the named variables, and the contents of the named property lists to the current write stream.",
      "contents": "pot ${1:contentslist}"
    },
    {
      "trigger": "pots\tPrints the title lines of all unburied procedures in the workspace to the current write stream.",
      "contents": "pots "
    },
    {
      "trigger": "power\tOutputs base raised to the power of exponent .",
      "contents": "power ${1:base} ${2:exponent}"
    },
    {
      "trigger": "pprop\tAdds a property to the property list named plistname .",
      "contents": "pprop ${1:plistname} ${2:propertyname} ${3:value}"
    },
    {
      "trigger": "ppt\tSets the pen's position to \"down\" and the pen's mode to \"paint\".",
      "contents": "ppt "
    },
    {
      "trigger": "pr\tPrints the input or inputs to the current write stream (initially the command-recall window ).",
      "contents": "pr ${1:thing}"
    },
    {
      "trigger": "pr\tPrints the input or inputs to the current write stream (initially the command-recall window ).",
      "contents": "pr ${1:thing1} ${2:thing2} ${3:...}"
    },
    {
      "trigger": "primitive?\tOutputs TRUE if the input is the name of a primitive (one that is built into FMSLogo), outputs FALSE otherwise.",
      "contents": "primitive? ${1:name}"
    },
    {
      "trigger": "primitivep\tOutputs TRUE if the input is the name of a primitive (one that is built into FMSLogo), outputs FALSE otherwise.",
      "contents": "primitivep ${1:name}"
    },
    {
      "trigger": "print\tPrints the input or inputs to the current write stream (initially the command-recall window ).",
      "contents": "print ${1:thing}"
    },
    {
      "trigger": "print\tPrints the input or inputs to the current write stream (initially the command-recall window ).",
      "contents": "print ${1:thing1} ${2:thing2} ${3:...}"
    },
    {
      "trigger": "printDepthLimit\tPRINTDEPTHLIMIT is a special variable.",
      "contents": "printDepthLimit "
    },
    {
      "trigger": "printWidthLimit\tPRINTWIDTHLIMIT is a special variable.",
      "contents": "printWidthLimit "
    },
    {
      "trigger": "procedure?\tOutputs TRUE if the input is the name of a procedure, outputs FALSE otherwise.",
      "contents": "procedure? ${1:name}"
    },
    {
      "trigger": "procedurep\tOutputs TRUE if the input is the name of a procedure, outputs FALSE otherwise.",
      "contents": "procedurep ${1:name}"
    },
    {
      "trigger": "procedures\tOutputs a contents list consisting of all unburied user-defined procedures in the workspace.",
      "contents": "procedures "
    },
    {
      "trigger": "product\tOutputs the product of its inputs.",
      "contents": "product ${1:factor1} ${2:factor2}"
    },
    {
      "trigger": "product\tOutputs the product of its inputs.",
      "contents": "product ${1:factor1} ${2:factor2} ${3:...} ${4:factor1}"
    },
    {
      "trigger": "proplist?\tOutputs TRUE if the input is the name of a property list, outputs FALSE otherwise.",
      "contents": "proplist? ${1:name}"
    },
    {
      "trigger": "proplistp\tOutputs TRUE if the input is the name of a property list, outputs FALSE otherwise.",
      "contents": "proplistp ${1:name}"
    },
    {
      "trigger": "pu\tSets the pen's position to \"up\", without changing its mode.",
      "contents": "pu "
    },
    {
      "trigger": "push\tAdds a thing to the front of a stack whose name is stackname .",
      "contents": "push ${1:stackname} ${2:value}"
    },
    {
      "trigger": "px\tSets the pen's position to \"down\" and the pen's mode to \"reverse\".",
      "contents": "px "
    },
    {
      "trigger": "questionbox\tDisplays a dialog box with title in the title bar, question as the message, and an edit control for text input.",
      "contents": "questionbox ${1:title} ${2:question}"
    },
    {
      "trigger": "queue\tAdds a thing to the back of a queue whose name is queuename .",
      "contents": "queue ${1:queuename} ${2:value}"
    },
    {
      "trigger": "quoted\tIf the input is a word, QUOTED outputs the word with a double-quote character ( \" ) appended to the front.",
      "contents": "quoted ${1:thing}"
    },
    {
      "trigger": "quotient\tOutputs the quotient of its inputs.",
      "contents": "quotient ${1:dividend} ${2:divisor}"
    },
    {
      "trigger": "quotient\tOutputs the quotient of its inputs.",
      "contents": "quotient ${1:divisor} ${2:dividend}"
    },
    {
      "trigger": "radarccos\tOutputs the inverse cosine of its input.",
      "contents": "radarccos ${1:num}"
    },
    {
      "trigger": "radarcsin\tOutputs the inverse sine of its input.",
      "contents": "radarcsin ${1:num}"
    },
    {
      "trigger": "radarctan\tWith one input, outputs the inverse tangent angle of num .",
      "contents": "radarctan ${1:angle}"
    },
    {
      "trigger": "radarctan\tWith one input, outputs the inverse tangent angle of num .",
      "contents": "radarctan ${1:x} ${2:y}"
    },
    {
      "trigger": "radcos\tOutputs the cosine of angle , which is taken in radians.",
      "contents": "radcos ${1:angle}"
    },
    {
      "trigger": "radioButtonCreate\tCreates a radio button control.",
      "contents": "radioButtonCreate ${1:parent} ${2:group} ${3:name} ${4:label} ${5:xpos} ${6:ypos} ${7:width} ${8:height}"
    },
    {
      "trigger": "radioButtonDelete\tDeletes (closes) the radio button that is identified by name .",
      "contents": "radioButtonDelete ${1:name}"
    },
    {
      "trigger": "radioButtonEnable\tEnables or disables the radio button identified by name .",
      "contents": "radioButtonEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "radioButtonGet\tOutputs the state (TRUE or FALSE) of the radio button that is identified by name .",
      "contents": "radioButtonGet ${1:name}"
    },
    {
      "trigger": "radioButtonSet\tSets the state of the radio button that is identified by name to state .",
      "contents": "radioButtonSet ${1:name} ${2:state}"
    },
    {
      "trigger": "radsin\tOutputs the sine of angle , which is taken in radians.",
      "contents": "radsin ${1:angle}"
    },
    {
      "trigger": "radtan\tOutputs the tangent of angle , which is taken in radians.",
      "contents": "radtan ${1:angle}"
    },
    {
      "trigger": "random\tOutputs a uniform random integer from 0 to the range input (not including the range input).",
      "contents": "random ${1:range}"
    },
    {
      "trigger": "rawascii\tOutputs the number that represents character in your current code page.",
      "contents": "rawascii ${1:character}"
    },
    {
      "trigger": "rc\tReads a single character from the read stream and outputs it.",
      "contents": "rc "
    },
    {
      "trigger": "rcs\tReads number characters from the read stream and outputs those characters as a word.",
      "contents": "rcs ${1:number}"
    },
    {
      "trigger": "readChar\tReads a single character from the read stream and outputs it.",
      "contents": "readChar "
    },
    {
      "trigger": "readChars\tReads number characters from the read stream and outputs those characters as a word.",
      "contents": "readChars ${1:number}"
    },
    {
      "trigger": "readEr\tOutputs the name of the current read stream file, or the empty list if the read stream is the Commander.",
      "contents": "readEr "
    },
    {
      "trigger": "readList\tReads a line from the read stream (initially the popup dialog) and outputs that line as a list.",
      "contents": "readList "
    },
    {
      "trigger": "readPos\tOutputs the file character position of the current read stream file as a number.",
      "contents": "readPos "
    },
    {
      "trigger": "readRawLine\tReads a line from the read stream and outputs that line as a word.",
      "contents": "readRawLine "
    },
    {
      "trigger": "readWord\tReads a line from the read stream and outputs that line as a word (without the end-of-line sequence).",
      "contents": "readWord "
    },
    {
      "trigger": "redefp\tIf TRUE, allows primitives to be erased (see ERASE ) or redefined (see COPYDEF ).",
      "contents": "redefp "
    },
    {
      "trigger": "reduce\tOutputs the result of applying the template to accumulate the items of the data input, two items at a time.",
      "contents": "reduce ${1:template} ${2:data}"
    },
    {
      "trigger": "refresh\tTells Logo to remember the turtle's motions so that they can be reconstructed in case the graphics window is obscured by another window.",
      "contents": "refresh "
    },
    {
      "trigger": "remainder\tOutputs the remainder of dividing dividend by divisor .",
      "contents": "remainder ${1:dividend} ${2:divisor}"
    },
    {
      "trigger": "remdup\tOutputs a copy of its input with duplicate members removed.",
      "contents": "remdup ${1:things}"
    },
    {
      "trigger": "remove\tOutputs a new thing that is equal to things with all members equal to thingtoremove removed.",
      "contents": "remove ${1:thingtoremove} ${2:things}"
    },
    {
      "trigger": "remprop\tRemoves the property named propertyname from the property list named plistname , if it exists.",
      "contents": "remprop ${1:plistname} ${2:propertyname}"
    },
    {
      "trigger": "repcount\tOutputs the number of the current repetition of a REPEAT command's instruction list.",
      "contents": "repcount "
    },
    {
      "trigger": "repeat\tRuns the instructions in instructionlist repeatedly, count times.",
      "contents": "repeat ${1:count} ${2:instructionlist}"
    },
    {
      "trigger": "rerandom\tMakes the output of RANDOM reproducible.",
      "contents": "rerandom "
    },
    {
      "trigger": "rerandom\tMakes the output of RANDOM reproducible.",
      "contents": "rerandom ${1:seed}"
    },
    {
      "trigger": "restore\tRestores (unminimizes or unmaximizes) the window whose title matches caption to the size and position it had before it was minimized or maximized.",
      "contents": "restore ${1:caption}"
    },
    {
      "trigger": "reverse\tOutputs the reverse of its input.",
      "contents": "reverse ${1:thing}"
    },
    {
      "trigger": "right\tTurns the turtle clockwise by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "right ${1:angle}"
    },
    {
      "trigger": "rightroll\tRolls the turtle toward his right side by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "rightroll ${1:angle}"
    },
    {
      "trigger": "rl\tReads a line from the read stream (initially the popup dialog) and outputs that line as a list.",
      "contents": "rl "
    },
    {
      "trigger": "rmdir\tRemoves (deletes) a directory named directoryname .",
      "contents": "rmdir ${1:directoryname}"
    },
    {
      "trigger": "roll\tOutputs the angle of the turtle's roll in degrees.",
      "contents": "roll "
    },
    {
      "trigger": "round\tOutputs the nearest integer to the input.",
      "contents": "round ${1:num}"
    },
    {
      "trigger": "rr\tRolls the turtle toward his right side by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "rr ${1:angle}"
    },
    {
      "trigger": "rseq\tOutputs an ordered list of count equally spaced rational numbers starting with from and ending with to .",
      "contents": "rseq ${1:from} ${2:to} ${3:count}"
    },
    {
      "trigger": "rt\tTurns the turtle clockwise by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "rt ${1:angle}"
    },
    {
      "trigger": "run\tRuns the instructions in instructionlist ; outputs if the list contains an expression that outputs.",
      "contents": "run ${1:instructionlist}"
    },
    {
      "trigger": "runparse\tOutputs the list that would result if thing (word or list) were entered as an instruction line;",
      "contents": "runparse ${1:thing}"
    },
    {
      "trigger": "runresult\tRuns the instructions in instructionlist .",
      "contents": "runresult ${1:instructionlist}"
    },
    {
      "trigger": "rw\tReads a line from the read stream and outputs that line as a word (without the end-of-line sequence).",
      "contents": "rw "
    },
    {
      "trigger": "save\tSaves the definitions of all unburied procedures, variables, and property lists in a file named filename .",
      "contents": "save ${1:filename}"
    },
    {
      "trigger": "savel\tSaves the definitions of the procedures, variables, and property lists specified by contentslist to a file named filename .",
      "contents": "savel ${1:contentslist} ${2:filename}"
    },
    {
      "trigger": "screencolor\tOutputs screen color information.",
      "contents": "screencolor "
    },
    {
      "trigger": "screencolour\tOutputs screen color information.",
      "contents": "screencolour "
    },
    {
      "trigger": "scrollbarCreate\tCreates a scrollbar control.",
      "contents": "scrollbarCreate ${1:parent} ${2:name} ${3:xpos} ${4:ypos} ${5:width} ${6:height} ${7:callback}"
    },
    {
      "trigger": "scrollbarDelete\tDeletes (closes) the scrollbar that is identified by name .",
      "contents": "scrollbarDelete ${1:name}"
    },
    {
      "trigger": "scrollbarEnable\tEnables or disables the scrollbar identified by name .",
      "contents": "scrollbarEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "scrollbarGet\tOutput the current position of the scrollbar control that is identified by name .",
      "contents": "scrollbarGet ${1:name}"
    },
    {
      "trigger": "scrollbarSet\tSet the range and current position of the scrollbar control that is identified by name .",
      "contents": "scrollbarSet ${1:name} ${2:min} ${3:max} ${4:position}"
    },
    {
      "trigger": "scrollx\tScrolls the horizontal scrollbar of the \"Screen\" window.",
      "contents": "scrollx ${1:deltax}"
    },
    {
      "trigger": "scrolly\tScrolls the vertical scrollbar of the \"Screen\" window.",
      "contents": "scrolly ${1:deltay}"
    },
    {
      "trigger": "scrunch\tOutputs a list containing two numbers, the X and Y scrunch factors, as used by SETSCRUNCH .",
      "contents": "scrunch "
    },
    {
      "trigger": "se\tOutputs a list whose members are its inputs, if those inputs are not lists.",
      "contents": "se ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "se\tOutputs a list whose members are its inputs, if those inputs are not lists.",
      "contents": "se ${1:thing1} ${2:thing2} ${3:thing3} ${4:...}"
    },
    {
      "trigger": "selectbox\tDisplays a dialog box with title as the title bar and choicelist as a list of choices.",
      "contents": "selectbox ${1:title} ${2:choicelist}"
    },
    {
      "trigger": "sentence\tOutputs a list whose members are its inputs, if those inputs are not lists.",
      "contents": "sentence ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "sentence\tOutputs a list whose members are its inputs, if those inputs are not lists.",
      "contents": "sentence ${1:thing1} ${2:thing2} ${3:thing3} ${4:...}"
    },
    {
      "trigger": "setActiveArea\tSets the active area for printing and saving pictures.",
      "contents": "setActiveArea ${1:area}"
    },
    {
      "trigger": "setBitindex\tSets the current bitmap cut buffer according to index .",
      "contents": "setBitindex ${1:index}"
    },
    {
      "trigger": "setBitmode\tSets the current bitmap mode according to mode .",
      "contents": "setBitmode ${1:mode}"
    },
    {
      "trigger": "setCursor\tSETCURSOR is not supported in FMSLogo.",
      "contents": "setCursor ${1:vector}"
    },
    {
      "trigger": "setCursorNowait\tSETCURSORNOWAIT changes the cursor to the familiar arrow shape.",
      "contents": "setCursorNowait "
    },
    {
      "trigger": "setCursorWait\tSETCURSORWAIT sets the cursor to the familiar hourglass shape.",
      "contents": "setCursorWait "
    },
    {
      "trigger": "setFc\tSets the flood color to color , which can either be a color index or a color vector.",
      "contents": "setFc ${1:color}"
    },
    {
      "trigger": "setFloodColor\tSets the flood color to color , which can either be a color index or a color vector.",
      "contents": "setFloodColor ${1:color}"
    },
    {
      "trigger": "setFloodColour\tSets the flood color to color , which can either be a color index or a color vector.",
      "contents": "setFloodColour ${1:color}"
    },
    {
      "trigger": "setFocus\tSelects a window whose caption (or title) is caption .",
      "contents": "setFocus ${1:caption}"
    },
    {
      "trigger": "setH\tTurns the turtle to a new absolute heading.",
      "contents": "setH ${1:angle}"
    },
    {
      "trigger": "setHeading\tTurns the turtle to a new absolute heading.",
      "contents": "setHeading ${1:angle}"
    },
    {
      "trigger": "setItem\tReplaces the index -th item of an input array with a new value.",
      "contents": "setItem ${1:index} ${2:array} ${3:value}"
    },
    {
      "trigger": "setLabelFont\tSets the font to be used by the LABEL command.",
      "contents": "setLabelFont ${1:font}"
    },
    {
      "trigger": "setLight\tSets how POLYVIEW illuminates polygons.",
      "contents": "setLight ${1:properties}"
    },
    {
      "trigger": "setMargins\tSETMARGINS is not supported (or needed) in FMSLogo.",
      "contents": "setMargins ${1:margins}"
    },
    {
      "trigger": "setOrientation\tOrients the turtle to a new absolute orientation.",
      "contents": "setOrientation ${1:orientation}"
    },
    {
      "trigger": "setPc\tSets the pen color to color , which can either be a color index or a color vector.",
      "contents": "setPc ${1:color}"
    },
    {
      "trigger": "setPen\tSets the pen's position, mode, and hardware-dependent characteristics according to the information in the characteristics input.",
      "contents": "setPen ${1:characteristics}"
    },
    {
      "trigger": "setPenColor\tSets the pen color to color , which can either be a color index or a color vector.",
      "contents": "setPenColor ${1:color}"
    },
    {
      "trigger": "setPenColour\tSets the pen color to color , which can either be a color index or a color vector.",
      "contents": "setPenColour ${1:color}"
    },
    {
      "trigger": "setPenPattern\tSETPENPATTERN is not supported in FMSLogo.",
      "contents": "setPenPattern ${1:pattern}"
    },
    {
      "trigger": "setPenSize\tSet the pen's thickness.",
      "contents": "setPenSize ${1:size}"
    },
    {
      "trigger": "setPitch\tPitches the turtle to a new absolute pitch.",
      "contents": "setPitch ${1:angle}"
    },
    {
      "trigger": "setPixel\tSets the pixel under the turtle to the color described by colorvector .",
      "contents": "setPixel ${1:colorvector}"
    },
    {
      "trigger": "setPos\tMoves the turtle to an absolute X,Y coordinate.",
      "contents": "setPos ${1:position}"
    },
    {
      "trigger": "setPosxyz\tMoves the turtle to an absolute X,Y,Z coordinate.",
      "contents": "setPosxyz ${1:position}"
    },
    {
      "trigger": "setRead\tSets the read stream to the file named filename .",
      "contents": "setRead ${1:filename}"
    },
    {
      "trigger": "setReadPos\tSets the file pointer of the read stream file so that the next READLIST , etc.",
      "contents": "setReadPos ${1:charpos}"
    },
    {
      "trigger": "setRoll\tRolls the turtle to a new absolute roll.",
      "contents": "setRoll ${1:angle}"
    },
    {
      "trigger": "setSc\tSets the screen background color to color and changes the entire screen to that color.",
      "contents": "setSc ${1:color}"
    },
    {
      "trigger": "setScreenColor\tSets the screen background color to color and changes the entire screen to that color.",
      "contents": "setScreenColor ${1:color}"
    },
    {
      "trigger": "setScreenColour\tSets the screen background color to color and changes the entire screen to that color.",
      "contents": "setScreenColour ${1:color}"
    },
    {
      "trigger": "setScrunch\tSETSCRUNCH is not needed to correct display problems, but is available for folks who like to deliberately misadjust the aspect ratio.",
      "contents": "setScrunch ${1:xscale} ${2:yscale}"
    },
    {
      "trigger": "setTimer\tSets up a timer identified by id (a number from 1-31) to call the instructions in callback in delay milliseconds.",
      "contents": "setTimer ${1:id} ${2:delay} ${3:callback}"
    },
    {
      "trigger": "setTurtle\tSelects turtle index for control.",
      "contents": "setTurtle ${1:index}"
    },
    {
      "trigger": "setTurtle\tSelects turtle index for control.",
      "contents": "setTurtle ${1:index} ${2:hasownpen}"
    },
    {
      "trigger": "setTurtleMode\tSets the bitmap mode for the currently selected turtle.",
      "contents": "setTurtleMode ${1:mode}"
    },
    {
      "trigger": "setWrite\tSets the write stream to the file named filename .",
      "contents": "setWrite ${1:filename}"
    },
    {
      "trigger": "setWritepos\tSets the file pointer of the write stream file so that the next PRINT , etc.",
      "contents": "setWritepos ${1:charpos}"
    },
    {
      "trigger": "setX\tMoves the turtle along the X axis from its current position to a new absolute X coordinate.",
      "contents": "setX ${1:xcor}"
    },
    {
      "trigger": "setXy\tMoves the turtle to an absolute X,Y coordinate.",
      "contents": "setXy ${1:xcor} ${2:ycor}"
    },
    {
      "trigger": "setXyz\tMoves the turtle to an absolute 3D position.",
      "contents": "setXyz ${1:xcor} ${2:ycor} ${3:zcor}"
    },
    {
      "trigger": "setY\tMoves the turtle along the Y axis from its current position to a new absolute Y coordinate.",
      "contents": "setY ${1:ycor}"
    },
    {
      "trigger": "setZ\tMoves the turtle along the Z axis from its current position to a new absolute Z coordinate.",
      "contents": "setZ ${1:zcor}"
    },
    {
      "trigger": "shell\tRuns an input string as a shell command.",
      "contents": "shell ${1:command}"
    },
    {
      "trigger": "shell\tRuns an input string as a shell command.",
      "contents": "shell ${1:command} ${2:wait}"
    },
    {
      "trigger": "show\tPrints the input or inputs to the current write stream, just like PRINT , except that if an input is a list it is printed inside square brackets.",
      "contents": "show ${1:thing}"
    },
    {
      "trigger": "show\tPrints the input or inputs to the current write stream, just like PRINT , except that if an input is a list it is printed inside square brackets.",
      "contents": "show ${1:thing1} ${2:thing2} ${3:...}"
    },
    {
      "trigger": "shown?\tOutputs TRUE if the turtle is shown (visible), FALSE if the turtle is hidden.",
      "contents": "shown? "
    },
    {
      "trigger": "shownp\tOutputs TRUE if the turtle is shown (visible), FALSE if the turtle is hidden.",
      "contents": "shownp "
    },
    {
      "trigger": "showturtle\tMakes the turtle visible.",
      "contents": "showturtle "
    },
    {
      "trigger": "sign\tOutputs the sign (-1 if negative, 0 if zero, 1 is positive) of its input.",
      "contents": "sign ${1:num}"
    },
    {
      "trigger": "sin\tOutputs the sine of angle , which is taken in degrees.",
      "contents": "sin ${1:angle}"
    },
    {
      "trigger": "slowdraw\tRedefines FORWARD, BACK, FD, and BK to take longer so that you can see the turtle as it moves (otherwise, the turtle moves as fast as it can).",
      "contents": "slowdraw ${1:slowness}"
    },
    {
      "trigger": "sort\tSorts a sequence (list, array, or word) in ascending order, or according to a given predicate.",
      "contents": "sort ${1:sequence}"
    },
    {
      "trigger": "sort\tSorts a sequence (list, array, or word) in ascending order, or according to a given predicate.",
      "contents": "sort ${1:sequence} ${2:predicate}"
    },
    {
      "trigger": "sound\tPlays a sequence of tones on the PC speaker.",
      "contents": "sound ${1:soundlist}"
    },
    {
      "trigger": "soundoff\tShutoff a sound turned on by SOUNDON .",
      "contents": "soundoff "
    },
    {
      "trigger": "soundon\tStarts playing a sound on the PC speaker.",
      "contents": "soundon ${1:frequency}"
    },
    {
      "trigger": "splitscreen\tDocks the commander window and the screen window inside the same frame and separates the two with a movable splitter bar.",
      "contents": "splitscreen "
    },
    {
      "trigger": "sqrt\tOutputs the square root of the input, which must be nonnegative.",
      "contents": "sqrt ${1:num}"
    },
    {
      "trigger": "ss\tDocks the commander window and the screen window inside the same frame and separates the two with a movable splitter bar.",
      "contents": "ss "
    },
    {
      "trigger": "st\tMakes the turtle visible.",
      "contents": "st "
    },
    {
      "trigger": "standout\tSTANDOUT is not yet supported in FMSLogo.",
      "contents": "standout ${1:thing}"
    },
    {
      "trigger": "startup\tIf assigned a list value in a file that is loaded by LOAD , that value is run as an instruction list after the loading.",
      "contents": "startup "
    },
    {
      "trigger": "staticCreate\tCreates a static text control.",
      "contents": "staticCreate ${1:parent} ${2:name} ${3:text} ${4:xpos} ${5:ypos} ${6:width} ${7:height}"
    },
    {
      "trigger": "staticDelete\tDeletes (closes) the static control that is identified by name .",
      "contents": "staticDelete ${1:name}"
    },
    {
      "trigger": "staticUpdate\tReplaces the text of the static control identified by name with text .",
      "contents": "staticUpdate ${1:name} ${2:text}"
    },
    {
      "trigger": "status\tDisplays the popup status window.",
      "contents": "status "
    },
    {
      "trigger": "step\tMarks the items in the contents list for stepping.",
      "contents": "step ${1:contentslist}"
    },
    {
      "trigger": "stepped\tOutputs a contents list consisting of the list of stepped procedures followed by two empty lists.",
      "contents": "stepped "
    },
    {
      "trigger": "stop\tEnds the running of the procedure in which it appears.",
      "contents": "stop "
    },
    {
      "trigger": "substring?\tIf thing2 is a word, SUBSTRINGP outputs TRUE if thing1 is EQUALP to a substring of thing2 , FALSE otherwise.",
      "contents": "substring? ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "substringp\tIf thing2 is a word, SUBSTRINGP outputs TRUE if thing1 is EQUALP to a substring of thing2 , FALSE otherwise.",
      "contents": "substringp ${1:thing1} ${2:thing2}"
    },
    {
      "trigger": "sum\tOutputs the sum of its inputs.",
      "contents": "sum ${1:addend1} ${2:addend2}"
    },
    {
      "trigger": "sum\tOutputs the sum of its inputs.",
      "contents": "sum ${1:addend1} ${2:addend2} ${3:...} ${4:addend1}"
    },
    {
      "trigger": "tag\tTAG marks a point in a procedure to which a GOTO instruction with the same tag input can jump.",
      "contents": "tag ${1:tag}"
    },
    {
      "trigger": "tan\tOutputs the tangent of angle , which is taken in degrees.",
      "contents": "tan ${1:angle}"
    },
    {
      "trigger": "test\tTEST remembers its input condition , which must be TRUE or FALSE, so that it be used later by IFTRUE or IFFALSE instructions.",
      "contents": "test ${1:condition}"
    },
    {
      "trigger": "text\tOutputs the text of the procedure named procname in the form expected by DEFINE : a list of lists, the first of which describes the inputs to the procedure and the rest o",
      "contents": "text ${1:procname}"
    },
    {
      "trigger": "textScreen\tUndocks the commander window from the screen window so that you can resize it to maximize the space available for text interaction.",
      "contents": "textScreen "
    },
    {
      "trigger": "thing\tOutputs the value of the variable whose name is the input word.",
      "contents": "thing ${1:varname} ${2:varname}"
    },
    {
      "trigger": "throw\tEnds the running of a CATCH instruction's instructionlist input.",
      "contents": "throw ${1:tag}"
    },
    {
      "trigger": "throw\tEnds the running of a CATCH instruction's instructionlist input.",
      "contents": "throw ${1:tag} ${2:value}"
    },
    {
      "trigger": "throw\tEnds the running of a CATCH instruction's instructionlist input.",
      "contents": "throw ${1:errortext}"
    },
    {
      "trigger": "throw\tEnds the running of a CATCH instruction's instructionlist input.",
      "contents": "throw ${1:4} ${2:badvalue}"
    },
    {
      "trigger": "time\tOutputs the current time on the system as a list of words.",
      "contents": "time "
    },
    {
      "trigger": "timemilli\tOutputs the time since Windows started, measured in milliseconds.",
      "contents": "timemilli "
    },
    {
      "trigger": "to\tCommand that prepares Logo to accept a procedure definition.",
      "contents": "to ${1:procname} ${2::input1} ${3::input2} ${4:...}\n\t\nend\n\n"
    },
    {
      "trigger": "tone\tPlays a tone on the PC speaker.",
      "contents": "tone ${1:frequency} ${2:duration}"
    },
    {
      "trigger": "towards\tOutputs the heading in degrees, at which the turtle should be headed so that it would point from its current position towards the position input.",
      "contents": "towards ${1:position}"
    },
    {
      "trigger": "towardsxyz\tOutputs a list, containing [roll pitch heading] at which the turtle should be oriented so that it would point from its current position to the position given.",
      "contents": "towardsxyz ${1:position}"
    },
    {
      "trigger": "trace\tMarks the named items for tracing.",
      "contents": "trace ${1:contentslist}"
    },
    {
      "trigger": "traced\tOutputs a contents list consisting of the list of traced items.",
      "contents": "traced "
    },
    {
      "trigger": "transfer\tOutputs the result of repeated evaluation of the template input.",
      "contents": "transfer ${1:endtest} ${2:template} ${3:inbasket}"
    },
    {
      "trigger": "true\tThis is a special word to indicate a positive condition.",
      "contents": "true "
    },
    {
      "trigger": "ts\tUndocks the commander window from the screen window so that you can resize it to maximize the space available for text interaction.",
      "contents": "ts "
    },
    {
      "trigger": "turtle\tOutputs the number which corresponds to the currently selected turtle (the one that is obeying all turtle commands).",
      "contents": "turtle "
    },
    {
      "trigger": "turtleMode\tOutputs the selected turtle's mode.",
      "contents": "turtleMode "
    },
    {
      "trigger": "turtleS\tOutputs the maximum turtle that has been selected since the last time you executed a CLEARSCREEN .",
      "contents": "turtleS "
    },
    {
      "trigger": "type\tPrints the input or inputs like PRINT , except that no newline character is printed at the end and multiple inputs are not separated by spaces.",
      "contents": "type ${1:thing}"
    },
    {
      "trigger": "type\tPrints the input or inputs like PRINT , except that no newline character is printed at the end and multiple inputs are not separated by spaces.",
      "contents": "type ${1:thing1} ${2:thing2} ${3:...}"
    },
    {
      "trigger": "unbury\tUnburies the procedures, variables, and property lists named in the input.",
      "contents": "unbury ${1:contentslist}"
    },
    {
      "trigger": "unburyAll\tUnburies all procedures, variables, and property lists in the workspace.",
      "contents": "unburyAll "
    },
    {
      "trigger": "unburyName\tUnburies the variable(s) named in the input.",
      "contents": "unburyName ${1:varname}"
    },
    {
      "trigger": "unburyName\tUnburies the variable(s) named in the input.",
      "contents": "unburyName ${1:varnamelist}"
    },
    {
      "trigger": "unicon\tUnminimizes (restores) the window whose title matches caption .",
      "contents": "unicon ${1:caption}"
    },
    {
      "trigger": "unstep\tTurns off stepping for the items in a contents list.",
      "contents": "unstep ${1:contentslist}"
    },
    {
      "trigger": "until\tRepeatedly evaluates the instructionlist as long as the evaluated conditionlist remains FALSE.",
      "contents": "until ${1:conditionlist} ${2:instructionlist}"
    },
    {
      "trigger": "untrace\tTurns off tracing for the named items.",
      "contents": "untrace ${1:contentslist}"
    },
    {
      "trigger": "up\tPitches the turtle's nose upward by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "up ${1:angle}"
    },
    {
      "trigger": "uppercase\tOutputs a word which is a copy of word , but with all lowercase letters changed to the corresponding uppercase letter.",
      "contents": "uppercase ${1:word}"
    },
    {
      "trigger": "uppitch\tPitches the turtle's nose upward by the specified angle, measured in degrees (1/360 of a circle).",
      "contents": "uppitch ${1:angle}"
    },
    {
      "trigger": "wait\tDelays further execution for about delay 1/60ths of a second.",
      "contents": "wait ${1:delay}"
    },
    {
      "trigger": "while\tRepeatedly evaluates the instructionlist as long as the evaluated conditionlist remains TRUE.",
      "contents": "while ${1:conditionlist} ${2:instructionlist}"
    },
    {
      "trigger": "window\tTells the turtle to enter \"window\" mode.",
      "contents": "window "
    },
    {
      "trigger": "windowCreate\tCreates a window.",
      "contents": "windowCreate ${1:parent} ${2:name} ${3:title} ${4:xpos} ${5:ypos} ${6:width} ${7:height} ${8:setup}"
    },
    {
      "trigger": "windowDelete\tDeletes (closes) the window whose name is name .",
      "contents": "windowDelete ${1:name}"
    },
    {
      "trigger": "windowEnable\tEnables or disables the window identified by name .",
      "contents": "windowEnable ${1:name} ${2:state}"
    },
    {
      "trigger": "windowFileedit\tOpens the editor on the file with the given filename .",
      "contents": "windowFileedit ${1:filename} ${2:callback}"
    },
    {
      "trigger": "windowSet\tSets the \"mode\" (for example, hidden, visible, etc.",
      "contents": "windowSet ${1:caption} ${2:mode}"
    },
    {
      "trigger": "winhelp\tWINHELP has two forms: with and without a keyword input.",
      "contents": "winhelp ${1:filename}"
    },
    {
      "trigger": "winhelp\tWINHELP has two forms: with and without a keyword input.",
      "contents": "winhelp ${1:filename} ${2:keyword}"
    },
    {
      "trigger": "word\tOutputs a word formed by concatenating its inputs.",
      "contents": "word ${1:word1} ${2:word2}"
    },
    {
      "trigger": "word\tOutputs a word formed by concatenating its inputs.",
      "contents": "word ${1:word1} ${2:word2} ${3:word3} ${4:...}"
    },
    {
      "trigger": "word?\tOutputs TRUE if the input is a word, FALSE otherwise.",
      "contents": "word? ${1:thing}"
    },
    {
      "trigger": "wordp\tOutputs TRUE if the input is a word, FALSE otherwise.",
      "contents": "wordp ${1:thing}"
    },
    {
      "trigger": "wrap\tTells the turtle to enter \"wrap\" mode.",
      "contents": "wrap "
    },
    {
      "trigger": "writepos\tOutputs the file position of the current write stream file as a number.",
      "contents": "writepos "
    },
    {
      "trigger": "writer\tOutputs the name of the current write stream file, or the empty list if the write stream is the Commander.",
      "contents": "writer "
    },
    {
      "trigger": "xcor\tOutputs the turtle's X coordinate.",
      "contents": "xcor "
    },
    {
      "trigger": "ycor\tOutputs the turtle's Y coordinate.",
      "contents": "ycor "
    },
    {
      "trigger": "yesnobox\tDisplays a dialog box with title in the title bar and question as the message.",
      "contents": "yesnobox ${1:title} ${2:question}"
    },
    {
      "trigger": "yield\tYIELD tells FMSLogo that it's okay to interrupt running Logo code in order to process windows messages, such as keyboard input, mouse clicks, or notifications to repaint ",
      "contents": "yield "
    },
    {
      "trigger": "zcor\tOutputs the turtle's Z coordinate.",
      "contents": "zcor "
    },
    {
      "trigger": "zoom\tSets the scale of the \"Screen\" window.",
      "contents": "zoom ${1:scale}"
    }
  ]
}